C251 COMPILER V5.60.0,  mymath                                                             15/04/25  11:45:02  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE mymath
OBJECT MODULE PLACED IN .\out_file\mymath.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE ..\code\mymath.c LARGE NOALIAS WARNINGLEVEL(3) OPTIMIZE(0,SIZE) BROWSE
                    - INCDIR(..\..\libraries\zf_common;..\..\libraries\zf_components;..\..\libraries\zf_device;..\..\libraries\zf_driver;..\u
                    -ser;..\code) DEBUG PRINT(.\out_file\mymath.lst) TABS(2) OBJECT(.\out_file\mymath.obj) 

stmt  level    source

    1          #include "zf_common_headfile.h"
    2          
    3          // 绝对值函数
    4          float my_abs(float x) {
    5   1          if(x < 0) return -x;
    6   1          return x;
    7   1      }
    8          
    9          // 平方根函数 - 使用牛顿迭代法
   10          float my_sqrt(float x) {
   11   1          float guess, last_guess;
   12   1          
   13   1          if(x < 0) return 0;
   14   1          if(x == 0) return 0;
   15   1          
   16   1          guess = x;
   17   1          do {
   18   2              last_guess = guess;
   19   2              guess = (guess + x / guess) * 0.5f;
   20   2          } while(my_abs(guess - last_guess) > 0.0001f);
   21   1          
   22   1          return guess;
   23   1      }
   24          
   25          // 反正弦函数 - 使用泰勒级数展开
   26          float my_asin(float x) {
   27   1          float result, term, x2;
   28   1          uint8 i;
   29   1          
   30   1          if(x < -1.0f || x > 1.0f) return 0;
   31   1          
   32   1          result = x;
   33   1          x2 = x * x;
   34   1          term = x;
   35   1          
   36   1          for(i = 1; i < 10; i++) {
   37   2              term = term * x2 * (2 * i - 1) * (2 * i - 1) / (2 * i * (2 * i + 1));
   38   2              result = result + term;
   39   2          }
   40   1          
   41   1          return result;
   42   1      }
   43          
   44          // 反正切函数 - 使用泰勒级数展开
   45          float my_atan(float x) {
   46   1          float result, term, x2;
   47   1          uint8 i;
   48   1          
   49   1          if(x < -1.0f) return -PI/2;
   50   1          if(x > 1.0f) return PI/2;
   51   1          
   52   1          result = x;
   53   1          x2 = x * x;
   54   1          term = x;
   55   1          
   56   1          for(i = 1; i < 10; i++) {
   57   2              term = term * (-x2);
C251 COMPILER V5.60.0,  mymath                                                             15/04/25  11:45:02  PAGE 2   

   58   2              result = result + term / (2 * i + 1);
   59   2          }
   60   1          
   61   1          return result;
   62   1      }
   63          
   64          // 反正切2函数 - 简化实现
   65          float my_atan2(float y, float x) {
   66   1          // 处理特殊情况
   67   1          if(x == 0) {
   68   2              if(y > 0) return PI / 2;
   69   2              if(y < 0) return -PI / 2;
   70   2              return 0;
   71   2          }
   72   1          
   73   1          // 简单情况 - 在 |x| > |y| 范围内使用原始实现
   74   1          if(my_abs(x) > my_abs(y)) {
   75   2              if(x > 0)
   76   2                  return my_atan(y / x);
   77   2              else if(y >= 0)
   78   2                  return my_atan(y / x) + PI;
   79   2              else
   80   2                  return my_atan(y / x) - PI;
   81   2          }
   82   1          // |y| >= |x| 的情况需要特殊处理
   83   1          else {
   84   2              if(y > 0)
   85   2                  return PI/2 - my_atan(x / y);
   86   2              else
   87   2                  return -PI/2 - my_atan(x / y);
   88   2          }
   89   1      }
   90          
   91          // 正弦函数 - 使用泰勒级数展开
   92          float my_sin(float x) {
   93   1          float result, term, x2;
   94   1          uint8 i;
   95   1          
   96   1          // 将角度归一化到 [-PI, PI]
   97   1          while(x > PI) x = x - 2 * PI;
   98   1          while(x < -PI) x = x + 2 * PI;
   99   1          
  100   1          result = x;
  101   1          term = x;
  102   1          x2 = x * x;
  103   1          
  104   1          for(i = 1; i < 10; i++) {
  105   2              term = term * (-x2) / ((2 * i) * (2 * i + 1));
  106   2              result = result + term;
  107   2          }
  108   1          
  109   1          return result;
  110   1      }
  111          
  112          // 余弦函数 - 使用泰勒级数展开
  113          float my_cos(float x) {
  114   1          float result, term, x2;
  115   1          uint8 i;
  116   1          
  117   1          // 将角度归一化到 [-PI, PI]
  118   1          while(x > PI) x = x - 2 * PI;
  119   1          while(x < -PI) x = x + 2 * PI;
  120   1          
  121   1          result = 1.0f;
  122   1          term = 1.0f;
  123   1          x2 = x * x;
C251 COMPILER V5.60.0,  mymath                                                             15/04/25  11:45:02  PAGE 3   

  124   1          
  125   1          for(i = 1; i < 10; i++) {
  126   2              term = term * (-x2) / ((2 * i - 1) * (2 * i));
  127   2              result = result + term;
  128   2          }
  129   1          
  130   1          return result;
  131   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1960     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =        92     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
