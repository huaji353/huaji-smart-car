#include "zf_common_headfile.h"
uint8 key1_state = 0;																// 按键动作状态
uint8 key1_state_last = 0;															// 上一次按键动作状态
uint8 key1_flag=0;                                //   1按下，松开0
uint8 key1_count=0;

uint8 key2_state = 0;																// 按键动作状态
uint8 key2_state_last = 0;															// 上一次按键动作状态
uint8 key2_flag=0;                                //   1按下，松开0
uint8 key2_count=0;

uint8 key3_state = 0;																// 按键动作状态
uint8 key3_state_last = 0;															// 上一次按键动作状态
uint8 key3_flag=0;                                //   1按下，松开0
uint8 key3_count=0;

uint8 key4_state = 0;																// 按键动作状态
uint8 key4_state_last = 0;															// 上一次按键动作状态
uint8 key4_flag=0;                                //   1按下，松开0
uint8 key4_count=0;

uint8 key5_state = 0;																// 按键动作状态
uint8 key5_state_last = 0;															// 上一次按键动作状态
uint8 key5_flag=0;                                //   1按下，松开0
uint8 key5_count=0;

uint8 key_switch_state = 0;														// 按键动作状态
uint8 key_switch_state_last = 0;													// 上一次按键动作状态
uint8 key_switch_flag=0;                           //   1按下，松开0
uint8 key_switch_count=0;
//按键信号量及按键反馈信号量

/*-------------------按键--------------------
                    button1左摇
                    button2右摇
                    button3下摇
                    button4上摇
                    button5确定
                    button_switch切换键
---------------------------------------------*/
uint8 button1=0,button2=0,button3=0,button4=0,button5=0,button_switch=0;
#ifdef  MENU_USE_RTT
#endif

int  key1_can(void)
{
	      key1_state_last = key1_state;
		    key1_state = gpio_get_level(KEY_1);
				if(key1_state && !key1_state_last)   
				{					
					key1_flag = 1;
		      return  1;
				}
	else 
		return 0;
}

int  key2_can(void)
{
	      key2_state_last = key2_state;
		    key2_state = gpio_get_level(KEY_2);
				if(key2_state && !key2_state_last)   
				{					
					key2_flag = 1;
		      return  1;
				}
	else 
		return 0;
}


int  key3_can(void)
{
	      key3_state_last = key3_state;
		    key3_state = gpio_get_level(KEY_3);
				if(key3_state && !key3_state_last)   
				{					
					key3_flag = 1;
		      return  1;
				}
	else 
		return 0;
}

int  key4_can(void)
{
	      key4_state_last = key4_state;
		    key4_state = gpio_get_level(KEY_4);
				if(key4_state && !key4_state_last)   
				{					
					key4_flag = 1;
		      return  1;
				}
	else 
		return 0;
}

int  key5_can(void)
{
	      key5_state_last = key5_state;
		    key5_state = gpio_get_level(KEY_5);
				if(key5_state && !key5_state_last)   
				{					
					key5_flag = 1;
		      return  1;
				}
	else 
		return 0;
}

int  key_switch_can(void)
{
	      key_switch_state_last = key_switch_state;
		    key_switch_state = gpio_get_level(KEY_SWITCH);
				if(key_switch_state && !key_switch_state_last)   
				{					
					key_switch_flag = 1;
		      return  1;
				}
	else 
		return 0;
}

void button_entry(void)
{
	uint8 i;
	static uint8 long_press_cnt=0;
	static uint8 long_press_button=0;
	static uint8 debounce_counter[6] = {0, 0, 0, 0, 0, 0}; // 添加消抖计数器
    
    #ifdef  MENU_USE_RTT
    while(1)
    {
    #endif
		//保存按键状态
		key1_state_last = key1_state;
		key2_state_last = key2_state;
		key3_state_last = key3_state;
		key4_state_last = key4_state;
		key5_state_last = key5_state;
		key_switch_state_last = key_switch_state;
		
		//读取当前按键状态
		key1_state = gpio_get_level(KEY_1);
		key2_state = gpio_get_level(KEY_2);
		key3_state = gpio_get_level(KEY_3);
		key4_state = gpio_get_level(KEY_4);
		key5_state = gpio_get_level(KEY_5);
		key_switch_state = gpio_get_level(KEY_SWITCH);

		
//		printf("key:%d %d %d %d %d %d\n",key1_state,key2_state,key3_state,key4_state,key5_state,key_switch_state);

		
		//长按检测
		if(!key1_state)
		{
			long_press_cnt++;
			long_press_cnt=long_press_cnt>LONG_PRESS_TIME?LONG_PRESS_TIME:long_press_cnt;
			if(long_press_cnt>=LONG_PRESS_TIME)long_press_button=1;
		}
		else if(!key2_state)
		{
			long_press_cnt++;
			long_press_cnt=long_press_cnt>LONG_PRESS_TIME?LONG_PRESS_TIME:long_press_cnt;
			if(long_press_cnt>=LONG_PRESS_TIME)long_press_button=2;
		}
		else if(!key3_state)
		{
			long_press_cnt++;
			long_press_cnt=long_press_cnt>LONG_PRESS_TIME?LONG_PRESS_TIME:long_press_cnt;
			if(long_press_cnt>=LONG_PRESS_TIME)long_press_button=3;
		}
		else if(!key4_state)
		{
			long_press_cnt++;
			long_press_cnt=long_press_cnt>LONG_PRESS_TIME?LONG_PRESS_TIME:long_press_cnt;
			if(long_press_cnt>=LONG_PRESS_TIME)long_press_button=4;
		}
		else if(!key5_state)
		{
			long_press_cnt++;
			long_press_cnt=long_press_cnt>LONG_PRESS_TIME?LONG_PRESS_TIME:long_press_cnt;
			if(long_press_cnt>=LONG_PRESS_TIME)long_press_button=5;
		}
		else if(!key_switch_state)
		{
			long_press_cnt++;
			long_press_cnt=long_press_cnt>LONG_PRESS_TIME?LONG_PRESS_TIME:long_press_cnt;
			if(long_press_cnt>=LONG_PRESS_TIME)long_press_button=6;
		}
		else
		{
			long_press_cnt=0;
			long_press_button=0;
		}
			
		//检测到按键按下之后并放开 释放一次信号量
		button1 = 0;button2 = 0;button3 = 0;button4 = 0;button5 = 0;button_switch = 0;
		
		// 增强消抖处理
		if((key1_state && !key1_state_last)||long_press_button==1)    
		{
            if(debounce_counter[0] == 0) { // 只在消抖计数为0时触发
                #ifdef  MENU_USE_RTT
                rt_sem_release(key1_sem);
                rt_sem_take(button_feedback_sem,RT_WAITING_FOREVER);
                #else
                button1 = 1;
                #endif
                debounce_counter[0] = 5; // 设置消抖计数，防止短时间内重复触发
            }
		}
		
		if((key2_state && !key2_state_last)||long_press_button==2)    
		{
            if(debounce_counter[1] == 0) {
                #ifdef  MENU_USE_RTT
                rt_sem_release(key2_sem);
                rt_sem_take(button_feedback_sem,RT_WAITING_FOREVER);
                #else
                button2 = 1;
                #endif
                debounce_counter[1] = 5;
            }
		}
		
		if((key3_state && !key3_state_last)||long_press_button==3)    
		{
            if(debounce_counter[2] == 0) {
                #ifdef  MENU_USE_RTT
                rt_sem_release(key3_sem);
                rt_sem_take(button_feedback_sem,RT_WAITING_FOREVER);
                #else
                button3 = 1;
                #endif
                debounce_counter[2] = 5;
            }
        }
		
		if((key4_state && !key4_state_last)||long_press_button==4)    
		{
            if(debounce_counter[3] == 0) {
                #ifdef  MENU_USE_RTT
                rt_sem_release(key4_sem);
                rt_sem_take(button_feedback_sem,RT_WAITING_FOREVER);
                #else
                button4 = 1;
                #endif
                debounce_counter[3] = 5;
            }
		}
		
		if((key5_state && !key5_state_last)||long_press_button==5)    
		{
            if(debounce_counter[4] == 0) {
                #ifdef  MENU_USE_RTT
                rt_sem_release(key5_sem);
                rt_sem_take(button_feedback_sem,RT_WAITING_FOREVER);
                #else
                button5 = 1;
                #endif
                debounce_counter[4] = 5;
            }
		}
		
		if((key_switch_state && !key_switch_state_last)||long_press_button==6)    
		{
            if(debounce_counter[5] == 0) {
                #ifdef  MENU_USE_RTT
                rt_sem_release(key_switch_sem);
                rt_sem_take(button_feedback_sem,RT_WAITING_FOREVER);
                #else
                button_switch = 1;
                #endif
                debounce_counter[5] = 5;
            }
		}
        
        // 更新消抖计数器
        for(i = 0; i < 6; i++) {
            if(debounce_counter[i] > 0) {
                debounce_counter[i]--;
            }
        }
        
        #ifdef  MENU_USE_RTT
		rt_thread_mdelay(20);
        #endif
    #ifdef  MENU_USE_RTT
	}
    #endif
}

void key_into()
{
	
    gpio_init(KEY_1, GPI, GPIO_LOW, GPI_PULL_UP);                                   // 初始化为GPIO浮空输入 默认上拉高电平
    gpio_init(KEY_2, GPI, GPIO_LOW, GPI_PULL_UP);                                   // 初始化为GPIO浮空输入 默认上拉高电平
    gpio_init(KEY_3, GPI, GPIO_LOW, GPI_PULL_UP);                                   // 初始化为GPIO浮空输入 默认上拉高电平
    gpio_init(KEY_4, GPI, GPIO_LOW, GPI_PULL_UP);                                   // 初始化为GPIO浮空输入 默认上拉高电平
    gpio_init(KEY_5, GPI, GPIO_LOW, GPI_PULL_UP);                                   // 初始化为GPIO浮空输入 默认上拉高电平
    gpio_init(KEY_SWITCH, GPI, GPIO_LOW, GPI_PULL_UP);                              // 初始化为GPIO浮空输入 默认上拉高电平
}
void key_text(void)
{
	button_entry();
	ips200_show_uint8(0,0,button1);	ips200_show_string(64,0,"button1");
	ips200_show_uint8(0,16,button2);	ips200_show_string(64,16,"button2");
	ips200_show_uint8(0,32,button3);	ips200_show_string(64,32,"button3");
	ips200_show_uint8(0,48,button4);	ips200_show_string(64,48,"button4");
	ips200_show_uint8(0,64,button5);	ips200_show_string(64,64,"button5");
	ips200_show_uint8(0,80,button_switch);	ips200_show_string(64,80,"button_switch");
}
